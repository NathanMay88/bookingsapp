#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RezFunctions.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyBookingApp")]
	public partial class RezDBModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser_Property(User_Property instance);
    partial void UpdateUser_Property(User_Property instance);
    partial void DeleteUser_Property(User_Property instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertAvailability(Availability instance);
    partial void UpdateAvailability(Availability instance);
    partial void DeleteAvailability(Availability instance);
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertMainBooking_SubBooking(MainBooking_SubBooking instance);
    partial void UpdateMainBooking_SubBooking(MainBooking_SubBooking instance);
    partial void DeleteMainBooking_SubBooking(MainBooking_SubBooking instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertRoomtype(Roomtype instance);
    partial void UpdateRoomtype(Roomtype instance);
    partial void DeleteRoomtype(Roomtype instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    #endregion
		
		public RezDBModelDataContext() : 
				base(global::RezFunctions.Properties.Settings.Default.MyBookingAppConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public RezDBModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RezDBModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RezDBModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RezDBModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User_Property> User_Properties
		{
			get
			{
				return this.GetTable<User_Property>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<Availability> Availabilities
		{
			get
			{
				return this.GetTable<Availability>();
			}
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<MainBooking_SubBooking> MainBooking_SubBookings
		{
			get
			{
				return this.GetTable<MainBooking_SubBooking>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rates
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<Roomtype> Roomtypes
		{
			get
			{
				return this.GetTable<Roomtype>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Property")]
	public partial class User_Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User_ID;
		
		private int _PropertyID;
		
		private int _ID;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public User_Property()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_User_Property", Storage="_AspNetUser", ThisKey="User_ID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.User_Properties.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.User_Properties.Add(this);
						this._User_ID = value.Id;
					}
					else
					{
						this._User_ID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_User_Property", Storage="_Property", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.User_Properties.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.User_Properties.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<User_Property> _User_Properties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._User_Properties = new EntitySet<User_Property>(new Action<User_Property>(this.attach_User_Properties), new Action<User_Property>(this.detach_User_Properties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_User_Property", Storage="_User_Properties", ThisKey="Id", OtherKey="User_ID")]
		public EntitySet<User_Property> User_Properties
		{
			get
			{
				return this._User_Properties;
			}
			set
			{
				this._User_Properties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Properties(User_Property entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_User_Properties(User_Property entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Availability")]
	public partial class Availability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private int _RoomtypeID;
		
		private System.Nullable<short> _Availability1;
		
		private System.Nullable<short> _ClosedToAvailability;
		
		private bool _StopSell;
		
		private EntityRef<Roomtype> _Roomtype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnRoomtypeIDChanging(int value);
    partial void OnRoomtypeIDChanged();
    partial void OnAvailability1Changing(System.Nullable<short> value);
    partial void OnAvailability1Changed();
    partial void OnClosedToAvailabilityChanging(System.Nullable<short> value);
    partial void OnClosedToAvailabilityChanged();
    partial void OnStopSellChanging(bool value);
    partial void OnStopSellChanged();
    #endregion
		
		public Availability()
		{
			this._Roomtype = default(EntityRef<Roomtype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomtypeID", DbType="Int NOT NULL")]
		public int RoomtypeID
		{
			get
			{
				return this._RoomtypeID;
			}
			set
			{
				if ((this._RoomtypeID != value))
				{
					if (this._Roomtype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomtypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomtypeID = value;
					this.SendPropertyChanged("RoomtypeID");
					this.OnRoomtypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Availability", Storage="_Availability1", DbType="SmallInt")]
		public System.Nullable<short> Availability1
		{
			get
			{
				return this._Availability1;
			}
			set
			{
				if ((this._Availability1 != value))
				{
					this.OnAvailability1Changing(value);
					this.SendPropertyChanging();
					this._Availability1 = value;
					this.SendPropertyChanged("Availability1");
					this.OnAvailability1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedToAvailability", DbType="SmallInt")]
		public System.Nullable<short> ClosedToAvailability
		{
			get
			{
				return this._ClosedToAvailability;
			}
			set
			{
				if ((this._ClosedToAvailability != value))
				{
					this.OnClosedToAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._ClosedToAvailability = value;
					this.SendPropertyChanged("ClosedToAvailability");
					this.OnClosedToAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopSell", DbType="Bit NOT NULL")]
		public bool StopSell
		{
			get
			{
				return this._StopSell;
			}
			set
			{
				if ((this._StopSell != value))
				{
					this.OnStopSellChanging(value);
					this.SendPropertyChanging();
					this._StopSell = value;
					this.SendPropertyChanged("StopSell");
					this.OnStopSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Availability", Storage="_Roomtype", ThisKey="RoomtypeID", OtherKey="ID", IsForeignKey=true)]
		public Roomtype Roomtype
		{
			get
			{
				return this._Roomtype.Entity;
			}
			set
			{
				Roomtype previousValue = this._Roomtype.Entity;
				if (((previousValue != value) 
							|| (this._Roomtype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roomtype.Entity = null;
						previousValue.Availabilities.Remove(this);
					}
					this._Roomtype.Entity = value;
					if ((value != null))
					{
						value.Availabilities.Add(this);
						this._RoomtypeID = value.ID;
					}
					else
					{
						this._RoomtypeID = default(int);
					}
					this.SendPropertyChanged("Roomtype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Booking")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CustomerID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _Nights;
		
		private decimal _Price;
		
		private int _RoomTypeID;
		
		private int _RateID;
		
		private string _RoomTypeName;
		
		private string _RateName;
		
		private string _Notes;
		
		private System.Nullable<bool> _Paid;
		
		private System.Nullable<char> _State;
		
		private int _PropertyID;
		
		private string _BookingGuid;
		
		private EntitySet<MainBooking_SubBooking> _MainBooking_SubBookings;
		
		private EntitySet<MainBooking_SubBooking> _MainBooking_SubBookings1;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Property> _Property;
		
		private EntityRef<Rate> _Rate;
		
		private EntityRef<Roomtype> _Roomtype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(long value);
    partial void OnCustomerIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnNightsChanging(int value);
    partial void OnNightsChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnRateIDChanging(int value);
    partial void OnRateIDChanged();
    partial void OnRoomTypeNameChanging(string value);
    partial void OnRoomTypeNameChanged();
    partial void OnRateNameChanging(string value);
    partial void OnRateNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPaidChanging(System.Nullable<bool> value);
    partial void OnPaidChanged();
    partial void OnStateChanging(System.Nullable<char> value);
    partial void OnStateChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnBookingGuidChanging(string value);
    partial void OnBookingGuidChanged();
    #endregion
		
		public Booking()
		{
			this._MainBooking_SubBookings = new EntitySet<MainBooking_SubBooking>(new Action<MainBooking_SubBooking>(this.attach_MainBooking_SubBookings), new Action<MainBooking_SubBooking>(this.detach_MainBooking_SubBookings));
			this._MainBooking_SubBookings1 = new EntitySet<MainBooking_SubBooking>(new Action<MainBooking_SubBooking>(this.attach_MainBooking_SubBookings1), new Action<MainBooking_SubBooking>(this.detach_MainBooking_SubBookings1));
			this._Customer = default(EntityRef<Customer>);
			this._Property = default(EntityRef<Property>);
			this._Rate = default(EntityRef<Rate>);
			this._Roomtype = default(EntityRef<Roomtype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="BigInt NOT NULL")]
		public long CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nights", DbType="Int NOT NULL")]
		public int Nights
		{
			get
			{
				return this._Nights;
			}
			set
			{
				if ((this._Nights != value))
				{
					this.OnNightsChanging(value);
					this.SendPropertyChanging();
					this._Nights = value;
					this.SendPropertyChanged("Nights");
					this.OnNightsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int NOT NULL")]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._Roomtype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateID", DbType="Int NOT NULL")]
		public int RateID
		{
			get
			{
				return this._RateID;
			}
			set
			{
				if ((this._RateID != value))
				{
					if (this._Rate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateIDChanging(value);
					this.SendPropertyChanging();
					this._RateID = value;
					this.SendPropertyChanged("RateID");
					this.OnRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeName", DbType="NVarChar(20)")]
		public string RoomTypeName
		{
			get
			{
				return this._RoomTypeName;
			}
			set
			{
				if ((this._RoomTypeName != value))
				{
					this.OnRoomTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeName = value;
					this.SendPropertyChanged("RoomTypeName");
					this.OnRoomTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateName", DbType="NVarChar(20)")]
		public string RateName
		{
			get
			{
				return this._RateName;
			}
			set
			{
				if ((this._RateName != value))
				{
					this.OnRateNameChanging(value);
					this.SendPropertyChanging();
					this._RateName = value;
					this.SendPropertyChanged("RateName");
					this.OnRateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit")]
		public System.Nullable<bool> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(1)")]
		public System.Nullable<char> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingGuid", DbType="NVarChar(128)")]
		public string BookingGuid
		{
			get
			{
				return this._BookingGuid;
			}
			set
			{
				if ((this._BookingGuid != value))
				{
					this.OnBookingGuidChanging(value);
					this.SendPropertyChanging();
					this._BookingGuid = value;
					this.SendPropertyChanged("BookingGuid");
					this.OnBookingGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_MainBooking_SubBooking", Storage="_MainBooking_SubBookings", ThisKey="ID", OtherKey="MainBookingID")]
		public EntitySet<MainBooking_SubBooking> MainBooking_SubBookings
		{
			get
			{
				return this._MainBooking_SubBookings;
			}
			set
			{
				this._MainBooking_SubBookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_MainBooking_SubBooking1", Storage="_MainBooking_SubBookings1", ThisKey="ID", OtherKey="SubBookingID")]
		public EntitySet<MainBooking_SubBooking> MainBooking_SubBookings1
		{
			get
			{
				return this._MainBooking_SubBookings1;
			}
			set
			{
				this._MainBooking_SubBookings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Booking", Storage="_Property", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Booking", Storage="_Rate", ThisKey="RateID", OtherKey="ID", IsForeignKey=true)]
		public Rate Rate
		{
			get
			{
				return this._Rate.Entity;
			}
			set
			{
				Rate previousValue = this._Rate.Entity;
				if (((previousValue != value) 
							|| (this._Rate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rate.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Rate.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._RateID = value.ID;
					}
					else
					{
						this._RateID = default(int);
					}
					this.SendPropertyChanged("Rate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Booking", Storage="_Roomtype", ThisKey="RoomTypeID", OtherKey="ID", IsForeignKey=true)]
		public Roomtype Roomtype
		{
			get
			{
				return this._Roomtype.Entity;
			}
			set
			{
				Roomtype previousValue = this._Roomtype.Entity;
				if (((previousValue != value) 
							|| (this._Roomtype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roomtype.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Roomtype.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._RoomTypeID = value.ID;
					}
					else
					{
						this._RoomTypeID = default(int);
					}
					this.SendPropertyChanged("Roomtype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MainBooking_SubBookings(MainBooking_SubBooking entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_MainBooking_SubBookings(MainBooking_SubBooking entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
		
		private void attach_MainBooking_SubBookings1(MainBooking_SubBooking entity)
		{
			this.SendPropertyChanging();
			entity.Booking1 = this;
		}
		
		private void detach_MainBooking_SubBookings1(MainBooking_SubBooking entity)
		{
			this.SendPropertyChanging();
			entity.Booking1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _Address4;
		
		private string _Country;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _VATNumber;
		
		private System.Nullable<decimal> _MonthlyCost;
		
		private System.Nullable<short> _NumberOfProperties;
		
		private System.Nullable<int> _NumberOfRooms;
		
		private EntitySet<Property> _Properties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnAddress4Changing(string value);
    partial void OnAddress4Changed();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnVATNumberChanging(string value);
    partial void OnVATNumberChanged();
    partial void OnMonthlyCostChanging(System.Nullable<decimal> value);
    partial void OnMonthlyCostChanged();
    partial void OnNumberOfPropertiesChanging(System.Nullable<short> value);
    partial void OnNumberOfPropertiesChanged();
    partial void OnNumberOfRoomsChanging(System.Nullable<int> value);
    partial void OnNumberOfRoomsChanged();
    #endregion
		
		public Company()
		{
			this._Properties = new EntitySet<Property>(new Action<Property>(this.attach_Properties), new Action<Property>(this.detach_Properties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(75)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(45)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(40)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(40)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address4", DbType="VarChar(40)")]
		public string Address4
		{
			get
			{
				return this._Address4;
			}
			set
			{
				if ((this._Address4 != value))
				{
					this.OnAddress4Changing(value);
					this.SendPropertyChanging();
					this._Address4 = value;
					this.SendPropertyChanged("Address4");
					this.OnAddress4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(2)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(75)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VATNumber", DbType="VarChar(20)")]
		public string VATNumber
		{
			get
			{
				return this._VATNumber;
			}
			set
			{
				if ((this._VATNumber != value))
				{
					this.OnVATNumberChanging(value);
					this.SendPropertyChanging();
					this._VATNumber = value;
					this.SendPropertyChanged("VATNumber");
					this.OnVATNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlyCost", DbType="Money")]
		public System.Nullable<decimal> MonthlyCost
		{
			get
			{
				return this._MonthlyCost;
			}
			set
			{
				if ((this._MonthlyCost != value))
				{
					this.OnMonthlyCostChanging(value);
					this.SendPropertyChanging();
					this._MonthlyCost = value;
					this.SendPropertyChanged("MonthlyCost");
					this.OnMonthlyCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfProperties", DbType="SmallInt")]
		public System.Nullable<short> NumberOfProperties
		{
			get
			{
				return this._NumberOfProperties;
			}
			set
			{
				if ((this._NumberOfProperties != value))
				{
					this.OnNumberOfPropertiesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfProperties = value;
					this.SendPropertyChanged("NumberOfProperties");
					this.OnNumberOfPropertiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRooms", DbType="Int")]
		public System.Nullable<int> NumberOfRooms
		{
			get
			{
				return this._NumberOfRooms;
			}
			set
			{
				if ((this._NumberOfRooms != value))
				{
					this.OnNumberOfRoomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRooms = value;
					this.SendPropertyChanged("NumberOfRooms");
					this.OnNumberOfRoomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Property", Storage="_Properties", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Property> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _Address4;
		
		private string _Country;
		
		private string _Notes;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnAddress4Changing(string value);
    partial void OnAddress4Changed();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Customer()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(40)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(40)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(40)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address4", DbType="VarChar(40)")]
		public string Address4
		{
			get
			{
				return this._Address4;
			}
			set
			{
				if ((this._Address4 != value))
				{
					this.OnAddress4Changing(value);
					this.SendPropertyChanging();
					this._Address4 = value;
					this.SendPropertyChanged("Address4");
					this.OnAddress4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(20)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Bookings", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MainBooking_SubBooking")]
	public partial class MainBooking_SubBooking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _MainBookingID;
		
		private long _SubBookingID;
		
		private EntityRef<Booking> _Booking;
		
		private EntityRef<Booking> _Booking1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMainBookingIDChanging(long value);
    partial void OnMainBookingIDChanged();
    partial void OnSubBookingIDChanging(long value);
    partial void OnSubBookingIDChanged();
    #endregion
		
		public MainBooking_SubBooking()
		{
			this._Booking = default(EntityRef<Booking>);
			this._Booking1 = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainBookingID", DbType="BigInt NOT NULL")]
		public long MainBookingID
		{
			get
			{
				return this._MainBookingID;
			}
			set
			{
				if ((this._MainBookingID != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainBookingIDChanging(value);
					this.SendPropertyChanging();
					this._MainBookingID = value;
					this.SendPropertyChanged("MainBookingID");
					this.OnMainBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubBookingID", DbType="BigInt NOT NULL")]
		public long SubBookingID
		{
			get
			{
				return this._SubBookingID;
			}
			set
			{
				if ((this._SubBookingID != value))
				{
					if (this._Booking1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubBookingIDChanging(value);
					this.SendPropertyChanging();
					this._SubBookingID = value;
					this.SendPropertyChanged("SubBookingID");
					this.OnSubBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_MainBooking_SubBooking", Storage="_Booking", ThisKey="MainBookingID", OtherKey="ID", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.MainBooking_SubBookings.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.MainBooking_SubBookings.Add(this);
						this._MainBookingID = value.ID;
					}
					else
					{
						this._MainBookingID = default(long);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_MainBooking_SubBooking1", Storage="_Booking1", ThisKey="SubBookingID", OtherKey="ID", IsForeignKey=true)]
		public Booking Booking1
		{
			get
			{
				return this._Booking1.Entity;
			}
			set
			{
				Booking previousValue = this._Booking1.Entity;
				if (((previousValue != value) 
							|| (this._Booking1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking1.Entity = null;
						previousValue.MainBooking_SubBookings1.Remove(this);
					}
					this._Booking1.Entity = value;
					if ((value != null))
					{
						value.MainBooking_SubBookings1.Add(this);
						this._SubBookingID = value.ID;
					}
					else
					{
						this._SubBookingID = default(long);
					}
					this.SendPropertyChanged("Booking1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Price1;
		
		private System.DateTime _Date;
		
		private bool _StopSell;
		
		private int _RateID;
		
		private int _RoomTypeID;
		
		private int _MinimumStay;
		
		private EntityRef<Rate> _Rate;
		
		private EntityRef<Roomtype> _Roomtype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPrice1Changing(decimal value);
    partial void OnPrice1Changed();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStopSellChanging(bool value);
    partial void OnStopSellChanged();
    partial void OnRateIDChanging(int value);
    partial void OnRateIDChanged();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnMinimumStayChanging(int value);
    partial void OnMinimumStayChanged();
    #endregion
		
		public Price()
		{
			this._Rate = default(EntityRef<Rate>);
			this._Roomtype = default(EntityRef<Roomtype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Price", Storage="_Price1", DbType="Money NOT NULL")]
		public decimal Price1
		{
			get
			{
				return this._Price1;
			}
			set
			{
				if ((this._Price1 != value))
				{
					this.OnPrice1Changing(value);
					this.SendPropertyChanging();
					this._Price1 = value;
					this.SendPropertyChanged("Price1");
					this.OnPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopSell", DbType="Bit NOT NULL")]
		public bool StopSell
		{
			get
			{
				return this._StopSell;
			}
			set
			{
				if ((this._StopSell != value))
				{
					this.OnStopSellChanging(value);
					this.SendPropertyChanging();
					this._StopSell = value;
					this.SendPropertyChanged("StopSell");
					this.OnStopSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateID", DbType="Int NOT NULL")]
		public int RateID
		{
			get
			{
				return this._RateID;
			}
			set
			{
				if ((this._RateID != value))
				{
					if (this._Rate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateIDChanging(value);
					this.SendPropertyChanging();
					this._RateID = value;
					this.SendPropertyChanged("RateID");
					this.OnRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int NOT NULL")]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._Roomtype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumStay", DbType="Int NOT NULL")]
		public int MinimumStay
		{
			get
			{
				return this._MinimumStay;
			}
			set
			{
				if ((this._MinimumStay != value))
				{
					this.OnMinimumStayChanging(value);
					this.SendPropertyChanging();
					this._MinimumStay = value;
					this.SendPropertyChanged("MinimumStay");
					this.OnMinimumStayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Price", Storage="_Rate", ThisKey="RateID", OtherKey="ID", IsForeignKey=true)]
		public Rate Rate
		{
			get
			{
				return this._Rate.Entity;
			}
			set
			{
				Rate previousValue = this._Rate.Entity;
				if (((previousValue != value) 
							|| (this._Rate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rate.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Rate.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._RateID = value.ID;
					}
					else
					{
						this._RateID = default(int);
					}
					this.SendPropertyChanged("Rate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Price", Storage="_Roomtype", ThisKey="RoomTypeID", OtherKey="ID", IsForeignKey=true)]
		public Roomtype Roomtype
		{
			get
			{
				return this._Roomtype.Entity;
			}
			set
			{
				Roomtype previousValue = this._Roomtype.Entity;
				if (((previousValue != value) 
							|| (this._Roomtype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roomtype.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Roomtype.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._RoomTypeID = value.ID;
					}
					else
					{
						this._RoomTypeID = default(int);
					}
					this.SendPropertyChanged("Roomtype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _Address4;
		
		private string _Country;
		
		private string _Email;
		
		private string _Phone;
		
		private System.Nullable<short> _NumberOfRooms;
		
		private System.Nullable<int> _TotalBookings;
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<decimal> _MinimumPrice;
		
		private EntitySet<User_Property> _User_Properties;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<Rate> _Rates;
		
		private EntitySet<Roomtype> _Roomtypes;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnAddress4Changing(string value);
    partial void OnAddress4Changed();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNumberOfRoomsChanging(System.Nullable<short> value);
    partial void OnNumberOfRoomsChanged();
    partial void OnTotalBookingsChanging(System.Nullable<int> value);
    partial void OnTotalBookingsChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnMinimumPriceChanging(System.Nullable<decimal> value);
    partial void OnMinimumPriceChanged();
    #endregion
		
		public Property()
		{
			this._User_Properties = new EntitySet<User_Property>(new Action<User_Property>(this.attach_User_Properties), new Action<User_Property>(this.detach_User_Properties));
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Rates = new EntitySet<Rate>(new Action<Rate>(this.attach_Rates), new Action<Rate>(this.detach_Rates));
			this._Roomtypes = new EntitySet<Roomtype>(new Action<Roomtype>(this.attach_Roomtypes), new Action<Roomtype>(this.detach_Roomtypes));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(40)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(40)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(40)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address4", DbType="VarChar(40)")]
		public string Address4
		{
			get
			{
				return this._Address4;
			}
			set
			{
				if ((this._Address4 != value))
				{
					this.OnAddress4Changing(value);
					this.SendPropertyChanging();
					this._Address4 = value;
					this.SendPropertyChanged("Address4");
					this.OnAddress4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(2)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(75)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRooms", DbType="SmallInt")]
		public System.Nullable<short> NumberOfRooms
		{
			get
			{
				return this._NumberOfRooms;
			}
			set
			{
				if ((this._NumberOfRooms != value))
				{
					this.OnNumberOfRoomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRooms = value;
					this.SendPropertyChanged("NumberOfRooms");
					this.OnNumberOfRoomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBookings", DbType="Int")]
		public System.Nullable<int> TotalBookings
		{
			get
			{
				return this._TotalBookings;
			}
			set
			{
				if ((this._TotalBookings != value))
				{
					this.OnTotalBookingsChanging(value);
					this.SendPropertyChanging();
					this._TotalBookings = value;
					this.SendPropertyChanged("TotalBookings");
					this.OnTotalBookingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumPrice", DbType="Money")]
		public System.Nullable<decimal> MinimumPrice
		{
			get
			{
				return this._MinimumPrice;
			}
			set
			{
				if ((this._MinimumPrice != value))
				{
					this.OnMinimumPriceChanging(value);
					this.SendPropertyChanging();
					this._MinimumPrice = value;
					this.SendPropertyChanged("MinimumPrice");
					this.OnMinimumPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_User_Property", Storage="_User_Properties", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<User_Property> User_Properties
		{
			get
			{
				return this._User_Properties;
			}
			set
			{
				this._User_Properties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Booking", Storage="_Bookings", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Rate", Storage="_Rates", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<Rate> Rates
		{
			get
			{
				return this._Rates;
			}
			set
			{
				this._Rates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Roomtype", Storage="_Roomtypes", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<Roomtype> Roomtypes
		{
			get
			{
				return this._Roomtypes;
			}
			set
			{
				this._Roomtypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Property", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Properties(User_Property entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_User_Properties(User_Property entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
		
		private void attach_Roomtypes(Roomtype entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Roomtypes(Roomtype entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rate")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _DaysAvailable;
		
		private string _RoomsAvailableon;
		
		private System.Nullable<System.TimeSpan> _StopSellTime;
		
		private int _ClosedToArrival;
		
		private System.Nullable<int> _ParentRateID;
		
		private string _Formula;
		
		private int _PropertyID;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDaysAvailableChanging(string value);
    partial void OnDaysAvailableChanged();
    partial void OnRoomsAvailableonChanging(string value);
    partial void OnRoomsAvailableonChanged();
    partial void OnStopSellTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStopSellTimeChanged();
    partial void OnClosedToArrivalChanging(int value);
    partial void OnClosedToArrivalChanged();
    partial void OnParentRateIDChanging(System.Nullable<int> value);
    partial void OnParentRateIDChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    #endregion
		
		public Rate()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysAvailable", DbType="NChar(7) NOT NULL", CanBeNull=false)]
		public string DaysAvailable
		{
			get
			{
				return this._DaysAvailable;
			}
			set
			{
				if ((this._DaysAvailable != value))
				{
					this.OnDaysAvailableChanging(value);
					this.SendPropertyChanging();
					this._DaysAvailable = value;
					this.SendPropertyChanged("DaysAvailable");
					this.OnDaysAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomsAvailableon", DbType="VarChar(30)")]
		public string RoomsAvailableon
		{
			get
			{
				return this._RoomsAvailableon;
			}
			set
			{
				if ((this._RoomsAvailableon != value))
				{
					this.OnRoomsAvailableonChanging(value);
					this.SendPropertyChanging();
					this._RoomsAvailableon = value;
					this.SendPropertyChanged("RoomsAvailableon");
					this.OnRoomsAvailableonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopSellTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StopSellTime
		{
			get
			{
				return this._StopSellTime;
			}
			set
			{
				if ((this._StopSellTime != value))
				{
					this.OnStopSellTimeChanging(value);
					this.SendPropertyChanging();
					this._StopSellTime = value;
					this.SendPropertyChanged("StopSellTime");
					this.OnStopSellTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedToArrival", DbType="Int NOT NULL")]
		public int ClosedToArrival
		{
			get
			{
				return this._ClosedToArrival;
			}
			set
			{
				if ((this._ClosedToArrival != value))
				{
					this.OnClosedToArrivalChanging(value);
					this.SendPropertyChanging();
					this._ClosedToArrival = value;
					this.SendPropertyChanged("ClosedToArrival");
					this.OnClosedToArrivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRateID", DbType="Int")]
		public System.Nullable<int> ParentRateID
		{
			get
			{
				return this._ParentRateID;
			}
			set
			{
				if ((this._ParentRateID != value))
				{
					this.OnParentRateIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRateID = value;
					this.SendPropertyChanged("ParentRateID");
					this.OnParentRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="Char(3)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Booking", Storage="_Bookings", ThisKey="ID", OtherKey="RateID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Price", Storage="_Prices", ThisKey="ID", OtherKey="RateID")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Rate", Storage="_Property", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Rates.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Rates.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Rate = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Rate = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Rate = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Rate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roomtype")]
	public partial class Roomtype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<short> _MinPeople;
		
		private System.Nullable<short> _MaxPeople;
		
		private System.Nullable<decimal> _MinPrice;
		
		private System.Nullable<short> _DefaultAllotment;
		
		private System.Nullable<int> _ParentRoomID;
		
		private string _Formula;
		
		private int _PropertyID;
		
		private System.Nullable<short> _ActualAllotment;
		
		private string _Description;
		
		private string _ShortDescription;
		
		private EntitySet<Availability> _Availabilities;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMinPeopleChanging(System.Nullable<short> value);
    partial void OnMinPeopleChanged();
    partial void OnMaxPeopleChanging(System.Nullable<short> value);
    partial void OnMaxPeopleChanged();
    partial void OnMinPriceChanging(System.Nullable<decimal> value);
    partial void OnMinPriceChanged();
    partial void OnDefaultAllotmentChanging(System.Nullable<short> value);
    partial void OnDefaultAllotmentChanged();
    partial void OnParentRoomIDChanging(System.Nullable<int> value);
    partial void OnParentRoomIDChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnActualAllotmentChanging(System.Nullable<short> value);
    partial void OnActualAllotmentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    #endregion
		
		public Roomtype()
		{
			this._Availabilities = new EntitySet<Availability>(new Action<Availability>(this.attach_Availabilities), new Action<Availability>(this.detach_Availabilities));
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(15)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPeople", DbType="SmallInt")]
		public System.Nullable<short> MinPeople
		{
			get
			{
				return this._MinPeople;
			}
			set
			{
				if ((this._MinPeople != value))
				{
					this.OnMinPeopleChanging(value);
					this.SendPropertyChanging();
					this._MinPeople = value;
					this.SendPropertyChanged("MinPeople");
					this.OnMinPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPeople", DbType="SmallInt")]
		public System.Nullable<short> MaxPeople
		{
			get
			{
				return this._MaxPeople;
			}
			set
			{
				if ((this._MaxPeople != value))
				{
					this.OnMaxPeopleChanging(value);
					this.SendPropertyChanging();
					this._MaxPeople = value;
					this.SendPropertyChanged("MaxPeople");
					this.OnMaxPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPrice", DbType="Money")]
		public System.Nullable<decimal> MinPrice
		{
			get
			{
				return this._MinPrice;
			}
			set
			{
				if ((this._MinPrice != value))
				{
					this.OnMinPriceChanging(value);
					this.SendPropertyChanging();
					this._MinPrice = value;
					this.SendPropertyChanged("MinPrice");
					this.OnMinPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultAllotment", DbType="SmallInt")]
		public System.Nullable<short> DefaultAllotment
		{
			get
			{
				return this._DefaultAllotment;
			}
			set
			{
				if ((this._DefaultAllotment != value))
				{
					this.OnDefaultAllotmentChanging(value);
					this.SendPropertyChanging();
					this._DefaultAllotment = value;
					this.SendPropertyChanged("DefaultAllotment");
					this.OnDefaultAllotmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRoomID", DbType="Int")]
		public System.Nullable<int> ParentRoomID
		{
			get
			{
				return this._ParentRoomID;
			}
			set
			{
				if ((this._ParentRoomID != value))
				{
					this.OnParentRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRoomID = value;
					this.SendPropertyChanged("ParentRoomID");
					this.OnParentRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="NVarChar(3)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualAllotment", DbType="SmallInt")]
		public System.Nullable<short> ActualAllotment
		{
			get
			{
				return this._ActualAllotment;
			}
			set
			{
				if ((this._ActualAllotment != value))
				{
					this.OnActualAllotmentChanging(value);
					this.SendPropertyChanging();
					this._ActualAllotment = value;
					this.SendPropertyChanged("ActualAllotment");
					this.OnActualAllotmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(250)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Availability", Storage="_Availabilities", ThisKey="ID", OtherKey="RoomtypeID")]
		public EntitySet<Availability> Availabilities
		{
			get
			{
				return this._Availabilities;
			}
			set
			{
				this._Availabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Booking", Storage="_Bookings", ThisKey="ID", OtherKey="RoomTypeID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roomtype_Price", Storage="_Prices", ThisKey="ID", OtherKey="RoomTypeID")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Roomtype", Storage="_Property", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Roomtypes.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Roomtypes.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Availabilities(Availability entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = this;
		}
		
		private void detach_Availabilities(Availability entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = null;
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Roomtype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SessionID;
		
		private int _CurrentPID;
		
		private string _UserID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(string value);
    partial void OnSessionIDChanged();
    partial void OnCurrentPIDChanging(int value);
    partial void OnCurrentPIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    #endregion
		
		public Session()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentPID", DbType="Int NOT NULL")]
		public int CurrentPID
		{
			get
			{
				return this._CurrentPID;
			}
			set
			{
				if ((this._CurrentPID != value))
				{
					this.OnCurrentPIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentPID = value;
					this.SendPropertyChanged("CurrentPID");
					this.OnCurrentPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
